# -*- coding: utf-8 -*-
"""Future_Data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SEIO54AHkRKmsMi31RsjwuOd1FPldGSB
"""

import pandas as pd
import json
import requests
from datetime import datetime
import os

metro_area_mapping = { #used to pair FIPS codes with metro area names
      "34740": "Muskegon, MI",
      "34980": "Nashville-Davidson--Murfreesboro--Franklin, TN",
      "39740": "Reading, PA",
      "24020": "Glens Falls, NY",
      "13460": "Bend-Redmond, OR",
      "47900": "Washington-Arlington-Alexandria, DC-VA-MD-WV",
      "43780": "South Bend-Mishawaka, IN-MI",
      "22180": "Fayetteville, NC",
      "26420": "Houston-The Woodlands-Sugar Land, TX",
      "12940": "Baton Rouge, LA",
      "40140": "Riverside-San Bernardino-Ontario, CA",
      "45940": "Trenton, NJ",
      "14540": "Bowling Green, KY",
      "39140": "Prescott, AZ",
      "48620": "Wichita, KS",
      "40900": "Sacramento--Roseville--Arden-Arcade, CA",
      "11100": "Amarillo, TX",
      "49020": "Winchester, VA-WV",
      "17780": "College Station-Bryan, TX",
      "29620": "Lansing-East Lansing, MI",
      "14260": "Boise City, ID",
      "41740": "San Diego-Carlsbad, CA",
      "10580": "Albany-Schenectady-Troy, NY",
      "45300": "Tampa-St. Petersburg-Clearwater, FL",
      "46060": "Tucson, AZ",
      "12620": "Bangor, ME",
      "15540": "Burlington-South Burlington, VT",
      "40980": "Saginaw, MI",
      "22520": "Florence-Muscle Shoals, AL",
      "36100": "Ocala, FL",
      "19660": "Deltona-Daytona Beach-Ormond Beach, FL",
      "49180": "Winston-Salem, NC",
      "31540": "Madison, WI",
      "36540": "Omaha-Council Bluffs, NE-IA",
      "13780": "Binghamton, NY",
      "21140": "Elkhart-Goshen, IN",
      "39340": "Provo-Orem, UT",
      "35660": "Niles-Benton Harbor, MI",
      "27340": "Jacksonville, NC",
      "44100": "Springfield, IL",
      "21340": "El Paso, TX",
      "38900": "Portland-Vancouver-Hillsboro, OR-WA",
      "48140": "Wausau, WI",
      "41620": "Salt Lake City, UT",
      "31140": "Louisville/Jefferson County, KY-IN",
      "41180": "St. Louis, MO-IL",
      "13140": "Beaumont-Port Arthur, TX",
      "32580": "McAllen-Edinburg-Mission, TX",
      "37460": "Panama City, FL",
      "37340": "Palm Bay-Melbourne-Titusville, FL",
      "22420": "Flint, MI",
      "26900": "Indianapolis-Carmel-Anderson, IN",
      "37900": "Peoria, IL",
      "42100": "Santa Cruz-Watsonville, CA",
      "27500": "Janesville-Beloit, WI",
      "36220": "Odessa, TX",
      "27980": "Kahului-Wailuku-Lahaina, HI",
      "16980": "Chicago-Naperville-Elgin, IL-IN-WI",
      "22500": "Florence, SC",
      "47580": "Warner Robins, GA",
      "30460": "Lexington-Fayette, KY",
      "40380": "Rochester, NY",
      "31420": "Macon, GA",
      "28020": "Kalamazoo-Portage, MI",
      "49620": "York-Hanover, PA",
      "49740": "Yuma, AZ",
      "10740": "Albuquerque, NM",
      "36420": "Oklahoma City, OK",
      "42540": "Scranton--Wilkes-Barre--Hazleton, PA",
      "27140": "Jackson, MS",
      "23580": "Gainesville, GA",
      "43620": "Sioux Falls, SD",
      "12580": "Baltimore-Columbia-Towson, MD",
      "47300": "Visalia-Porterville, CA",
      "31080": "Los Angeles-Long Beach-Anaheim, CA",
      "22020": "Fargo, ND-MN",
      "12100": "Atlantic City-Hammonton, NJ",
      "16700": "Charleston-North Charleston, SC",
      "16820": "Charlottesville, VA",
      "44700": "Stockton-Lodi, CA",
      "11460": "Ann Arbor, MI",
      "29540": "Lancaster, PA",
      "25180": "Hagerstown-Martinsburg, MD-WV",
      "14500": "Boulder, CO",
      "13740": "Billings, MT",
      "25260": "Hanford-Corcoran, CA",
      "39540": "Racine, WI",
      "39300": "Providence-Warwick, RI-MA",
      "41500": "Salinas, CA",
      "28420": "Kennewick-Richland, WA",
      "42140": "Santa Fe, NM",
      "26580": "Huntington-Ashland, WV-KY-OH",
      "47260": "Virginia Beach-Norfolk-Newport News, VA-NC",
      "24140": "Goldsboro, NC",
      "32780": "Medford, OR",
      "46140": "Tulsa, OK",
      "16620": "Charleston, WV",
      "33740": "Monroe, LA",
      "21500": "Erie, PA",
      "38860": "Portland-South Portland, ME",
      "00000": "Not Identified or Nonmetropolitan",
      "44060": "Spokane-Spokane Valley, WA",
      "45820": "Topeka, KS",
      "18580": "Corpus Christi, TX",
      "28700": "Kingsport-Bristol-Bristol, TN-VA",
      "39820": "Redding, CA",
      "28140": "Kansas City, MO-KS",
      "46340": "Tyler, TX",
      "37980": "Philadelphia-Camden-Wilmington, PA-NJ-DE-MD",
      "12220": "Auburn-Opelika, AL",
      "48060": "Watertown-Fort Drum, NY",
      "25860": "Hickory-Lenoir-Morganton, NC",
      "20500": "Durham-Chapel Hill, NC",
      "23420": "Fresno, CA",
      "27100": "Jackson, MI",
      "36740": "Orlando-Kissimmee-Sanford, FL",
      "22900": "Fort Smith, AR-OK",
      "26820": "Idaho Falls, ID",
      "30980": "Longview, TX",
      "29180": "Lafayette, LA",
      "41860": "San Francisco-Oakland-Hayward, CA",
      "31700": "Manchester-Nashua, NH",
      "27780": "Johnstown, PA",
      "13820": "Birmingham-Hoover, AL",
      "12060": "Atlanta-Sandy Springs-Roswell, GA",
      "37100": "Oxnard-Thousand Oaks-Ventura, CA",
      "22660": "Fort Collins, CO",
      "29820": "Las Vegas-Henderson-Paradise, NV",
      "20100": "Dover, DE",
      "41700": "San Antonio-New Braunfels, TX",
      "49660": "Youngstown-Warren-Boardman, OH-PA",
      "46700": "Vallejo-Fairfield, CA",
      "17820": "Colorado Springs, CO",
      "16860": "Chattanooga, TN-GA",
      "12700": "Barnstable Town, MA",
      "42200": "Santa Maria-Santa Barbara, CA",
      "15980": "Cape Coral-Fort Myers, FL",
      "34940": "Naples-Immokalee-Marco Island, FL",
      "48660": "Wichita Falls, TX",
      "28940": "Knoxville, TN",
      "17460": "Cleveland-Elyria, OH",
      "27260": "Jacksonville, FL",
      "17900": "Columbia, SC",
      "26980": "Iowa City, IA",
      "34580": "Mount Vernon-Anacortes, WA",
      "44140": "Springfield, MA",
      "23540": "Gainesville, FL",
      "12540": "Bakersfield, CA",
      "35980": "Norwich-New London, CT",
      "10900": "Allentown-Bethlehem-Easton, PA-NJ",
      "17980": "Columbus, GA-AL",
      "33660": "Mobile, AL",
      "47380": "Waco, TX",
      "29700": "Laredo, TX",
      "34060": "Morgantown, WV",
      "40060": "Richmond, VA",
      "14460": "Boston-Cambridge-Newton, MA-NH",
      "35380": "New Orleans-Metairie, LA",
      "17020": "Chico, CA",
      "12020": "Athens-Clarke County, GA",
      "16740": "Charlotte-Concord-Gastonia, NC-SC",
      "47220": "Vineland-Bridgeton, NJ",
      "19300": "Daphne-Fairhope-Foley, AL",
      "34820": "Myrtle Beach-Conway-North Myrtle Beach, SC-NC",
      "29340": "Lake Charles, LA",
      "29460": "Lakeland-Winter Haven, FL",
      "41100": "St. George, UT",
      "24580": "Green Bay, WI",
      "36780": "Oshkosh-Neenah, WI",
      "26620": "Huntsville, AL",
      "22140": "Farmington, NM",
      "19740": "Denver-Aurora-Lakewood, CO",
      "38940": "Port St. Lucie, FL",
      "15940": "Canton-Massillon, OH",
      "14860": "Bridgeport-Stamford-Norwalk, CT",
      "24660": "Greensboro-High Point, NC",
      "45460": "Terre Haute, IN",
      "32820": "Memphis, TN-MS-AR",
      "46540": "Utica-Rome, NY",
      "33460": "Minneapolis-St. Paul-Bloomington, MN-WI",
      "33340": "Milwaukee-Waukesha-West Allis, WI",
      "19820": "Detroit-Warren-Dearborn, MI",
      "14010": "Bloomington, IL",
      "19380": "Dayton, OH",
      "14020": "Bloomington, IN",
      "45780": "Toledo, OH",
      "49340": "Worcester, MA-CT",
      "15680": "California-Lexington Park, MD",
      "16540": "Chambersburg-Waynesboro, PA",
      "33780": "Monroe, MI",
      "12980": "Battle Creek, MI",
      "38300": "Pittsburgh, PA",
      "21780": "Evansville, IN-KY",
      "10420": "Akron, OH",
      "45060": "Syracuse, NY",
      "42220": "Santa Rosa, CA",
      "17140": "Cincinnati, OH-KY-IN",
      "12260": "Augusta-Richmond County, GA-SC",
      "16060": "Carbondale-Marion, IL",
      "33860": "Montgomery, AL",
      "19780": "Des Moines-West Des Moines, IA",
      "15180": "Brownsville-Harlingen, TX",
      "44180": "Springfield, MO",
      "11700": "Asheville, NC",
      "10180": "Abilene, TX",
      "24340": "Grand Rapids-Wyoming, MI",
      "29200": "Lafayette-West Lafayette, IN",
      "37860": "Pensacola-Ferry Pass-Brent, FL",
      "40220": "Roanoke, VA",
      "30780": "Little Rock-North Little Rock-Conway, AR",
      "41540": "Salisbury, MD-DE",
      "31180": "Lubbock, TX",
      "39580": "Raleigh, NC",
      "24780": "Greenville, NC",
      "35300": "New Haven-Milford, CT",
      "45220": "Tallahassee, FL",
      "17300": "Clarksville, TN-KY",
      "17660": "Coeur d'Alene, ID",
      "22220": "Fayetteville-Springdale-Rogers, AR-MO",
      "33100": "Miami-Fort Lauderdale-West Palm Beach, FL",
      "48700": "Williamsport, PA",
      "40420": "Rockford, IL",
      "29740": "Las Cruces, NM",
      "24860": "Greenville-Anderson-Mauldin, SC",
      "28660": "Killeen-Temple, TX",
      "35620": "New York-Newark-Jersey City, NY-NJ-PA",
      "23060": "Fort Wayne, IN",
      "47940": "Waterloo-Cedar Falls, IA",
      "16300": "Cedar Rapids, IA",
      "35840": "North Port-Sarasota-Bradenton, FL",
      "19100": "Dallas-Fort Worth-Arlington, TX",
      "21660": "Eugene, OR",
      "19340": "Davenport-Moline-Rock Island, IA-IL",
      "18140": "Columbus, OH",
      "41940": "San Jose-Sunnyvale-Santa Clara, CA",
      "42340": "Savannah, GA",
      "27740": "Johnson City, TN",
      "43300": "Sherman-Denison, TX",
      "38060": "Phoenix-Mesa-Scottsdale, AZ",
      "25420": "Harrisburg-Carlisle, PA",
      "25540": "Hartford-West Hartford-East Hartford, CT",
      "30340": "Lewiston-Auburn, ME",
      "15500": "Burlington, NC",
      "42660": "Seattle-Tacoma-Bellevue, WA",
      "33700": "Modesto, CA",
      "15380": "Buffalo-Cheektowaga-Niagara Falls, NY",
      "41420": "Salem, OR",
      "24540": "Greeley, CO",
      "17420": "Cleveland, TN",
      "13980": "Blacksburg-Christiansburg-Radford, VA",
      "16580": "Champaign-Urbana, IL",
      "12420": "Austin-Round Rock, TX",
      "38220": "Pine Bluff, AR",
      "46520": "Urban Honolulu, HI",
      "25940": "Hilton Head Island-Bluffton-Beaufort, SC",
      "11540": "Appleton, WI",
      "20700": "East Stroudsburg, PA",
      "42020": "San Luis Obispo-Paso Robles-Arroyo Grande, CA",
      "36260": "Ogden-Clearfield, UT",
      "43340": "Shreveport-Bossier City, LA",
      "43900": "Spartanburg, SC"}

def fetch_census_data(year, month):
    url = "https://api.census.gov/data/"
    year_inp = f"{year}/"
    data_set = "cps/basic/"
    month_inp = f"{month}"
    info_grab = "?get=CBSA,PEERNLAB,HEFAMINC,HETENURE,HRHTYPE,PEEDUCA,PRFTLF,PTERNH1O"
    full_url = url + year_inp + data_set + month_inp + info_grab
    response = requests.get(full_url)
    print(full_url)
    if response.status_code == 200:
        data = response.json()
        if data:
            columns = data[0]
            rows = data[1:]
            df = pd.DataFrame(rows, columns=columns)
            df['Year'] = year
            df['Month'] = month

            # Drop rows with missing values in the 'CBSA' column
            df = df.dropna(subset=['CBSA'])

            # Convert 'CBSA' column to float
            df = df[df['CBSA'].astype(str).str.strip().replace('', '0').astype(float) > 10000]

            # Map CBSA codes to metro area names
            df["Metro Area"] = df["CBSA"].map(metro_area_mapping)

            # Rename 'CBSA' column to 'GTCBSA'
            df.rename(columns={'CBSA': 'GTCBSA'}, inplace=True)
            df['PTERNH1O'] = pd.to_numeric(df['PTERNH1O'], errors='coerce')
            df = df[df["PEERNLAB"] != -1]
            df = df[df["PTERNH1O"].between(0.0, 99.99)]  # Filtering within the specified range
            return df
        else:
            print("No data found for", year, month)
            return None
    else:
        print("Failed to fetch data for", year, month)
        return None

def update_data(csv_path):
    latest_year = 0
    latest_month = 0
#check the csv for the latest month and year
    if os.path.exists(csv_path):
        df = pd.read_csv(csv_path)
        latest_year = df['Year'].max()
        latest_month = df[df['Year'] == latest_year]['Month'].max()

    print("Latest Year:", latest_year)
    print("Latest Month:", latest_month)
#pull current month and year
    now = datetime.now()
    current_year = now.year
    current_month = now.strftime("%b").lower()
#compare csv month and year with latest month and year
    for year in range(latest_year, current_year + 1):
        start_month = latest_month if year == latest_year else "jan"
        end_month = current_month if year == current_year else "dec"
        for month in get_months(start_month, end_month):
            df = fetch_census_data(year, month)
            if df is not None: #if the check pulled a year and month then proceed
                with open(csv_path, 'a') as f:
                    df.to_csv(f, header=f.tell()==0, index=False)
                print(f"Data for {year}-{month} fetched and CSV updated successfully!")
            else:
                print(f"Failed to fetch data for {year}-{month}")

def get_months(start_month, end_month):
    months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
    start_index = months.index(start_month)
    end_index = months.index(end_month)
    return months[start_index:end_index+1]

def main():
    csv_path = "CENSUS_CPS_DATA.csv"
    update_data(csv_path)

if __name__ == "__main__":
    main()
